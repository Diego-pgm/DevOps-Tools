Continuous Integration (CI)
=======================================
-----------------------------------
What is Continuous Integration?
--------------------------------------------

Continuous Integration (CI): The practice of frequently merging 
code changes done by developers.

Code is merged constantly throughout the day.

Execution of automated tests to verify the build.

Rinse and repeat

-------
What Does Continuous Integration Look Like
-----------------------------------------------

1. Usually a CI server involved.
2. A developer commits a code change.
3. The CI server sees the change and automatically performs a 
build.
4. Automated tests are executed against the build.
5. Developers are notified if the build fails.

------
Why Do Continuous Integration
-----------------------------------

Early detection of certain types of bugs.

Eliminate the scramble to integrate just before a big release.

Makes frequent releases possible.

Makes continuous testing possible.

Encourages good coding practices.

========
Continuous Devlivery and Continuous Deployment
====================================================
--------
What is Continuous Delivery 
-----------------------------------------

Continuous Delivery (CD): The practice of continuously
maintaining code in a deployable state.

Code is always in deployable state.

Use the terms continuous delivery and continuous deployment 
interchangeably

-------
What is Continuous Deployment?
-----------------------------------------

Continuous Deployment: The practice of frequently deploying small
code changes to production.

Code is always in a deployable state.

Code is deployed to production frequently:
- Deploying code to production multiple times a day is common.

Deployments to production are routine and common place

-----
What Does Continuous Delivery and Deployment Look Like?
-----------------------------------------------------------

Code goes through a series of stages:
- automated build.
- automated testing.
- manual acceptance testing.

The result is a deployable artifact or package.

Deployment to production is automated.

The deploy can be rolled back using an automated process.

------
Why do Continuous Delivery and Deployment?
---------------------------------------------------

Faster time-to-market.

Fewer problems caused by the deployment process.

Lower risk.

Reliable rollbacks.

Fearless deployments.

====
What is Jenkins
===========================

A self-contained open source automation tool

Can be used to automate:
- building
- testing
- delivering
- deploying software

Supported version control tools:
- AccuRev
- CVS
- Subversion
- Git
- Mercurial
- Perforce
- ClearCase
- RTC

------
How Jenkins Works
-----------------------------

- Jenkins is available as a Java 8 WAR archive.
- Installer packages are available for most major operating 
systems.
- The source code is mostly Java with a few Groovy, Ruby and Antir
file.

----
Important Concepts
---------------------------

Artifact: Is an immutable file that is generated by a build or 
pipeline when Jenkins runs.

Core: Is the primary Jenkins application.

Downstream: When you're executing a project or a pipeline you do 
have the ability to go and trigger other projects or pipelines.

Fingerprint: is a hash and it is unique and we use these to track
the usage of an Artifact or other entities across multiple 
pipelines or projects.

Master: Master node of Jenkins

Project: Is a user config description of work in Jenkins.

Pipeline: Is a user defined model of a continuous delivery 
pipeline.

Plugins.

Stage: Is a part of a pipeline and is used to go and define 
distinct subsets of the entire Pipeline.

Step: Single task and it tells Jenkins what to do on the stages.

Upstream: Is what triggered the Downstream.

Workspace: Is a disposable directory on the file system of the
node that is executing the work.

----
Important Jenkins Plugins
-----------------------------------

Copy Artifact: It adds a build step to copy an Artifact from one
project to another.

Fingerprint: It adds the ability to generate a fingerprint as a
build step.

Docker Pipeline: Allows you to go and build and use Docker 
containers from a Pipeline.

Docker Build and Publish: Build Docker image using a Dockerfile
and publish the image and tag it to a Docker registry.

Git: Pull code from GitHub or another Git system.

===
Artifact Repositories
================================

Tools designed to optimize the download and storage of binary 
files.

A binary repository is a software repository for packages, 
artifacts and their corresponding metadata.

Store binary files produced by an organization itself.
- Product Releases
- Nightly product builds
- Third party binaries

Popular Artifact Repositories:
- Artifactory
- Nexus

----
Artifactory
---------------------------

Package support for:
- Docker
- YUM
- APT
- NPM
- Maven
- NuGet
- Ruby
- Chef
- Puppet
- Python
- Git
- PHP
- Bower
- Go

Build Tools:
- Jenkins
- Bamboo
- TeamCity
- Maven
- Gradle
- Ivy
- Travis CI
- Circle CI
- TFS

Orchestration Tools:
- Chef
- Kubernetes
- Helm
- Mesos
- Puppet
- Docker Swarm

Storage:
- S3
- Google Cloud Storage
- Azure Blog Storage

----
Nexus
-------------------------

Support for:
- Maven/Java
- NPM
- NuGet
- RubyGems
- Docker
- APT
- YUM
- Gradle
- Ant
- Maven
- Ivy

Compatible with: 
- Eclipse
- IntelliJ
- Hudson
- Jenkins
- Puppet
- Chef
- Docker

====
Installing Jenkins
========================================

$ yum install java -y
$ sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
$ sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key
$ yum install -y jenkins
$ service jenkins.service start
$ chkconfig jenkins

Go to: <server-hostname>:8080
$ cat /var/lib/jenkins/secrets/InitialAdminPassword
08769582566644e5bdbc5337128b7587
Install suggested plugins

====
Jenkins Plugins
=============================================

Install plugins:
1. Go to Manage Jenkins>Manage Plugins

Install the AnsiColor, CopyArtifact, Docker, Docker Slave, 
CloudBees Docker Build and Publish, Fingerprint, NodeJS plugins

===
Jenkins Slave
==============================

[In a Centos 7 with Docker (As root) we'll call it slave]

1. Install Java
$ yum install java -y

2. Add a Jenkins user
$ useradd -d /var/lib/jenkins jenkins
$ su jenkins -s /bin/bash

3. Create an authorized key
$ cd /var/lib/jenkins
$ mkdir .ssh
$ chmod 700 .ssh/
$ cd .ssh/
$ touch authorized_keys
$ exit

4. Create a password for the user (need when transfering the key)
$ passwd jenkins

[IN THE MASTER as root]

1. Switch to the jenkins user
$ su jenkins -s /bin/bash
It has to go to /var/lib/jenkins/.ssh/id_rsa

2. Copy the key
$ ssh-copy-id jenkins@5b1e8ab9c46c.mylabserver.com

[BACK ON SLAVE]

1. Cat the authorized key
$ cat /var/lib/jenkins/.ssh/authorized_keys

2. Set the proper permissions on the key and file
$ su jenkins -s /bin/bash
$ cd /var/lib/jenkins/
$ chmod 700 .ssh/
$ cd .ssh/
$ chmod 600 authorized_keys

[In the master]

Connect to the server
$ ssh 5b1e8ab9c46c.mylabserver.com

[IN JENKINS]
1. Go to Manage Jenkins>Manage Nodes>New Node
2. Give a node name: jenkins slave
3. Click on permanent agent and ok
4. # executors: 2
5. Remote root directory: /var/lib/jenkins
6. Launch slave agents via SSH:
 - Host: 5b1e8ab9c46c.mylabserver.com
 - Add>Jenkins:
   - Global credentials
   - SSH Username with private key
   - username: jenkins
   - From the jenkins master
   - Add
 - jenkins
 - Host key verification Strategy: Manual trusted key
7. Save