LPI DevOps Tools Engineer Certification Notes
==============================================

What is Vagrant?
----------------------

Vagrant is a tool for building and managing virtual 
machine environments.

Vagrant Commands
----------------------

vagrant init: Initializes the current directory to be a Vagrant 
environment creating a Vagrantfile.

vagrant up: Creates and configures guest machines according to 
your Vagrantfile.

vagrant destroy: Stops the running and destroys all resources 
that were created.

vagrant validate: Validates your Vagrantfile.

vagrant provision: Runs any configured provisioners.

vagrant reload: Runs a halt followed by an up.

vagrant status: This will tell you the state of the machines.

vagrant ssh: SSH into a running Vagrant machine.

--------------------
Installing Vagrant 2.0.4
--------------------

yum install -y https://releases.hashicorp.com/vagrant/2.0.4/vagrant_2.0.4_x86_64.rpm

Check the installation
vagrant --version 


Vagrant commands
---------------------------------------

Creating the Vagrantfile:
$ vagrant init

Change the image of the machine
$ sudo vi Vagrantfile

config.vm.box = "ubuntu/trusty64"

Start the Virtual Machine
$ vagrant up

If you're working with a large file it is recommended to validate
the Vagrantfile.
$ vagrant validate

Check the status of a virtualbox
$ vagrant status <box-name>
$ vagrant status default

Connect to a machine
$ vagrant ssh

Shut down the machine
$ vagrant halt

Stop and destroy machines
$ vagrant destroy

Configuration (minimal for docker):
Vagrant.configure("2") do |config|
  config.vm.provider "docker" do |d|
    d.image = "ghost"
  end
end

SSH is not running in this machine so we can just execute the 
Docker command to do that.
docker ps

Use all the vagrant commands to destroy/use this container.

Vagrantfile
------------------

Its nothing more than a file that's going to go and describe the 
type of machines requres and how you going to go through the 
process of configuring and provisioning them.

I only want to have one file per project

This is infrastructure as code.

Vagrantfile is written on Ruby.

In vagrant with docker:
Vagrant.configure("2") do |config| # version of Vagrant
  config.vm.provider "docker" do |d| # create a docker container
    d.image = "ghost" # docker image
    d.ports = ["80:2368"] 
  end
end

Access the container
$ docker exec -i -t <cont-id> /bin/bash

Everything that I change in the /vagrant/Vagrantfile that is 
inside the container will be seen in /root/Vagrant of the host 
machine.

[host machine]

We can specify a synced folder that will work in the host and in 
the vagrant machine

Vagrantfile:
Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/trusty64"
  config.vm.synced_folder ".", "/vagrant"
  config.vm.box_download_insecure = true
end

Connect to vagrant via ssh
$ ssh vagrant@localhost -p <vagrant-port> -i ~/.vagrant.d/insecure_private_key
Password: vagrant

Show the ssh information for our host
$ vagrant ssh-config

Defining multiple machines with Vagrantfile
Vagrant.configure("2") do |config|
  config.vm.define "web" do |web|
    web.vm.box = "ubuntu/trusty64"
  end

  config.vm.define "db" do |db|
    db.vm.box = "ubuntu/trusty64"
  end
end

Puppet & SQL
------------------------------------
$ git clone https://github.com/linuxacademy/content-LPIC-OT-vagrant-puppet.git vagrant

$ vi Vagrantfile

There are several different provisioners that we have.

File provisioner; this will enable you to go and use a file, 
something like a shell script.

Shell provisioner; this provisioner will let you go and execute 
shell commands, either do this by using inline shell commands or
you can specify a file.

And then there are various configuration management tools like:
Chef, Ansible, Puppet, as well as Salt.

Define a hostname for the server and install apache server
Vagrant.configure("2") do |config|
  config.vm.define "web" do |web|
    web.vm.box = "ubuntu/trusty64"
    web.vm.hostname = "web.vagrant.vm"
    web.vm.provision "shell" do |shell|
      shell.inline = "apt-get update -y"
      shell.inline = "apt-get install -y apache2"
    end
  end

  config.vm.define "db" do |db|
    db.vm.box = "ubuntu/trusty64"
    db.vm.hostname = "db.vagrant.vm"
    db.vm.provision "puppet" do |puppet|
      puppet.manifests_path = "puppet/manifests"
      puppet.manifest_file = "default.app"
      puppet.module_path = "puppet/modules"
      puppet.hiera_config_path = "puppet/hiera.yaml"
    end
  end
end

Reload the provisioner
$ vagrant reload --provision

Validate for no errors
$ vagrant validate

$ vagrant up --provision

Build a Dev Environment
-----------------------------------
Build a Dockerfile:
FROM node:alpine
COPY code /code
WORKDIR /code
RUN npm install --production
EXPOSE 3000
CMD ["node", "app.js"]

Build Vagrantfile
ENV['VAGRANT_DEFAULT_PROVIDER'] = 'docker'
Vagrant.configure("2") do |config|
  config.vm.provider "docker" do |d|
    #d.image = "ubuntu"
    d.build_dir = "."
    d.ports = ["80:3000"]
  end
  config.vm.synced_folder ".", "/vagrant"
end

Run environment
vagrant up

===============================================================

What are Vagrant Boxes
----------------------------------------

They are the package format for Vagrant environments

They can be used on any platform that Vagrant supports

Download Vagrant Boxes: https://app.vagrantup.com/boxes/search

vagrant box commands:

$ vagrant box add <ADDRESS>
$ vagrant box list
$ vagrant box outdated
$ vagrant box prune
$ vagrant box remove <NAME>
$ vagrant box repackage <NAME><PROVIDER><VERSION>
$ vagrant box update
$ vagrant init hashicorp/precise64
This command will generate:
Vagrant.configure("2")do|config|
  config.vm.box="hashicorp/precise64"
end

Creating a Base Box
-------------------------------------------

In our local machine create a directory for the vagrant box
$ mkdir vagrant_box
$ cd vagrant_box

Download the minimal ubuntu 18.04
$ curl http://archive.ubuntu.com/ubuntu/dists/bionic/main/installer-amd64/current/images/netboot/mini.iso -o mini.iso

Port forward 2222:22
storage: mini-iso
usrname: vagrant
password: vagrant
hostname: ubuntu
Guided installation
Install security updates automatically
OpenSSH server and basic Ubuntu server
Yes yes yes yes yes
remove disk not to get to the install again.

set root password to vagrant
$ sudo passwd root

Put vagrant user into sudoers
$ visudo -f /etc/sudoers.d/vagrant

vagrant ALL=(ALL) NOPASSWD:ALL

Create the ssh directory and modify its permissions
$ mkdir /home/vagrant/.ssh
$ chmod 0700 /home/vagrant/.ssh/
$ cd /home/vagrant/.ssh

Get the key for ssh
$ wget https://raw.githubusercontent.com/hashicorp/vagrant/master/keys/vagrant.pub

Move file into authorized keys
$ mv vagrant.pub authorized_keys
$ chmod 0600 authorized_keys
$ cd ../

Make vagrant user the owner of this directory
chown -R vagrant .ssh/

Open the sshd_config file
$ vi /etc/ssh/sshd_config
Insert:
AuthorizedKeysFile %h/.ssh/authorized_keys

Restart ssh
$ service ssh restart

Install necessary packages
$ apt-get install -y gcc build-essential git linux-headers-$(uname -r) dkms

Install virtualbox tools 
Devices>Insert Quest Additiond CD image

Mount the CD-ROM
$ mount /dev/cdrom /mnt

Execute VirtualBox Linux additions
$ cd mnt
$ ./VBoxLinuxAdditions.run

Do a quick zero out to fix fragmentation issues
$ dd if=/dev/zero of=/EMPTY bs=1M
$ rm -f /EMPTY

IN THE CONSOLE (HOST)
Package the Vagrant Box
$ vagrant package --base ubuntu64-base

This will create a package.box to spin off a vagrant environment

Create vagrant_box
$ vagrant box add ubuntu64 package.box
$ vagrant box list

Initialize a different environment
$ vagrant init ubuntu64 -m
$ vagrant up
$ vagrant ssh

Vagrant commands
--------------------------

List the boxes
$ vagrant box list 
$ vagrant global-status

Check which box is outdated
$ vagrant box outdated --global

Update the boxes
$ vagrant box update <box/id>

Make a backup of the package.box and repackage the ubuntu box
$ mv package.box package.box-bak
$ vagrant box list
$ vagrant box repackage ubuntu64 <vbox> <number> 

Remove a box
$ vagrant box remove <box>

Add a box
$ vagrant box add ubuntu64 package.box

Box File Format
----------------------------------------------------

With Vagrant supporting multiple providers as well as the ability
to go and version box, things have come slightly more complex...

We can create a box file (tar/zip file) 

Create a new dir where the file is going to be
$ mkdir box
$ cp package.box box
$ cd box
$ tar zxvf package.box
$ ls

It creates a box file, a metadatafile and a information file
